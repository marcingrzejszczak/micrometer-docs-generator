def VERSIONS = [
		libs.roasterApi,
		libs.roasterJdt,
		libs.handlebars,
		libs.picocli,

		// logging
		libs.logback,
		libs.slf4j,

		// test
		libs.assertj,
		libs.mockitoCore,
		libs.mockitoInline
]

def MICROMETER_PLATFORM_VERSIONS = [
		libs.micrometerBom, libs.micrometerTracingBom
]

def PLATFORM_VERSIONS = [
		libs.junitBom
]

subprojects {
	plugins.withId('java-library') {
		dependencies {
			constraints {
				// Direct dependencies
				VERSIONS.each { version ->
					// java-library plugin has three root configurations, so we apply constraints too all of
					// them so they all can use the managed versions.
					api version
					compileOnly version
					runtimeOnly version
				}
			}
			(MICROMETER_PLATFORM_VERSIONS + PLATFORM_VERSIONS).each { bom ->
				api platform(bom)
				compileOnly platform(bom)
				runtimeOnly platform(bom)
			}
		}
	}
	plugins.withId('java-platform') {
		dependencies {
			constraints {
				rootProject.subprojects
						.findAll { !it.name.contains('micrometer-docs-generator-bom') }
						.each { api(group: it.group, name: it.name, version: it.version.toString()) }
			}
			javaPlatform.allowDependencies()
			MICROMETER_PLATFORM_VERSIONS.each { api platform(it) }
		}
	}
}
