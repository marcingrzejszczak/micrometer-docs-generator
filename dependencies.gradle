def VERSIONS = [
		'org.jboss.forge.roaster:roaster-api:2.22.3.Final', // last using jdk8
		'org.jboss.forge.roaster:roaster-jdt:2.22.3.Final', // last using jdk8

		// logging
		'ch.qos.logback:logback-classic:1.2.+',
		'org.slf4j:slf4j-api:1.7.+',

		// test
		'org.assertj:assertj-core:latest.release',
		'org.awaitility:awaitility:latest.release',
		'org.junit.jupiter:junit-jupiter:5.8.+',
		'org.junit.platform:junit-platform-launcher:1.8.+',
		'org.junit.vintage:junit-vintage-engine:5.8.+',
		'org.mockito:mockito-core:latest.release',
		'org.mockito:mockito-inline:latest.release',
		'org.testcontainers:testcontainers:latest.release',
		'org.testcontainers:junit-jupiter:latest.release'
]

def PLATFORM_VERSIONS = [
		'io.micrometer:micrometer-bom:1.10.0-SNAPSHOT',
		'io.micrometer:micrometer-tracing-bom:1.0.0-SNAPSHOT',
		'org.junit:junit-bom:5.8.+'
]

subprojects {
	plugins.withId('java-library') {
		dependencies {
			constraints {
				// Direct dependencies
				VERSIONS.each { version ->
					// java-library plugin has three root configurations, so we apply constraints too all of
					// them so they all can use the managed versions.
					api version
					compileOnly version
					runtimeOnly version
				}
			}
			PLATFORM_VERSIONS.each {
				implementation platform(it)
			}
		}
	}
	plugins.withId('java-platform') {
		dependencies {
			constraints {
				rootProject.subprojects.findAll {
					!it.name.contains('micrometer-docs-generator-bom')
				}.each {
					api(group: it.group,
							name: it.name,
							version: it.version.toString())
				}
			}
			javaPlatform.allowDependencies()
			PLATFORM_VERSIONS.each {
				api platform(it)
			}
		}
	}
}
